import { Component, Inject } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material/dialog';
import { Router } from '@angular/router';
import { ServiceService } from '../service/service.service';
import { SubjectService } from '../service/subject.service';
import { Service } from '../service';
import { ServiceUpdateComponent } from '../service-update/service-update.component';

@Component({
  selector: 'app-servicebysubject',
  templateUrl: './servicebysubject.component.html',
  styleUrls: ['./servicebysubject.component.css']
})
export class ServicebysubjectComponent {
  services: Service[] = [];
  addServiceForm: FormGroup;

  constructor(
    @Inject(MAT_DIALOG_DATA) public data: { subjectIds: number },
    private formBuilder: FormBuilder,
    private serviceService: ServiceService,
    private subjectService: SubjectService,
    private router: Router,
    public dialogRef: MatDialogRef<ServicebysubjectComponent>,
    private dialog: MatDialog // Include the MatDialog dependency
  ) {
    this.getServicesBySubjectIds(data.subjectIds);
    this.addServiceForm = this.formBuilder.group({
      serviceName: ['', Validators.required],
      serviceDescription: ['', Validators.required]
    });
  }

  getServicesBySubjectIds(subjectIds: number): void {
    this.serviceService.getServicesBySubjectId(subjectIds).subscribe(
      (services: Service[]) => {
        this.services = services;
        console.log(services);
      },
      (error) => {
        console.error('Error while fetching services by subject IDs:', error);
      }
    );
  }

  addService(): void {
    if (this.addServiceForm.invalid) {
      return;
    }

    this.subjectService.getSubjectById(this.data.subjectIds).subscribe(
      (subject: any) => {
        const newServiceData = new Service(
          0, // id_service will be generated by the server
          this.addServiceForm.value.serviceName,
          this.addServiceForm.value.serviceDescription,
          subject
        );

        this.serviceService.addNewService(newServiceData).subscribe(
          (response: any) => {
            console.log('Service added successfully:', response);
            this.getServicesBySubjectIds(this.data.subjectIds);
            this.addServiceForm.reset();
          },
          (error: any) => {
            console.error('Error while adding service:', error);
          }
        );
      },
      (error: any) => {
        console.error('Error while fetching subject by ID:', error);
      }
    );
  }

  deleteService(serviceId: number): void {
    this.serviceService.deleteService(serviceId).subscribe(
      (response: any) => {
        console.log('Service deleted successfully:', response);
        this.getServicesBySubjectIds(this.data.subjectIds);
      },
      (error: any) => {
        console.error('Error while deleting service:', error);
      }
    );
  }

  goToUpdateService(serviceId: number): void {
    const dialogRef = this.dialog.open(ServiceUpdateComponent, {
      width: '800px',
      data: { service: this.services.find(service => service.serviceid === serviceId) }
    });
    dialogRef.afterClosed().subscribe(result => {
      // Handle any actions after the dialog is closed
    });
    this.dialogRef.close();


    // Remove the following line
    // this.router.navigate(['/service-update', serviceId]);
  }

  goBack(): void {
    this.dialogRef.close();
    this.router.navigate(['/subject-list']);
  }
}